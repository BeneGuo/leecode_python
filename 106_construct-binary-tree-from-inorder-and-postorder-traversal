# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:
        """
        根据后序遍历和中序遍历恢复一颗二叉树, leecode106
        中序遍历 inorder = [9,3,15,20,7]
        后序遍历 postorder = [9,15,7,20,3]
        :param inorder:
        :param postorder:
        :return:
        """
        def buildoneside(post_order, in_order):
            if not post_order or not in_order:
                return None
            root_val = post_order[-1]
            root_idx = in_order.index(root_val)
            left_inorder = in_order[0:root_idx]
            right_inorder = in_order[root_idx + 1:]
            left_postorder = post_order[0:len(left_inorder)]
            right_postorder = post_order[len(left_inorder):-1]
            r_node = TreeNode(val=root_val,
                              left=buildoneside(left_postorder, left_inorder),
                              right=buildoneside(right_postorder, right_inorder))
            return r_node

        root = buildoneside(postorder, inorder)
        return root
