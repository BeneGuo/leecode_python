class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        """
        leecode 752 打开转盘锁
        转动一次，有8中可能性，带剪枝的8叉树的最短路径 BFS
        :param deadends:
        :param target:
        :return:
        """
        def plus(base):
            """密码锁向上拨动一次"""
            if base == 9:
                result = 0
            else:
                result = base + 1
            return result

        def minus(base):
            """密码锁向下拨动一次"""
            if base == 0:
                result = 9
            else:
                result = base - 1
            return result

        root = '0000'
        queue = []  # 空队列
        l_target = target
        l_deads = set(deadends)
        # 记录已经访问过的密码，防止走回头路
        visited = set()
        # 从起点开始广度优先搜索
        step = 0
        queue.append(root)
        visited.add(root)
        while queue:
            size = len(queue)
            for j in range(size):
                cur = queue.pop(0)  # 0000
                # 判断是不是target
                if cur == l_target:
                    return step
                if cur in l_deads:
                    continue

                # 将八种可能性加入队列
                for i in range(4):
                    char = cur[i]
                    plus_l = cur
                    new_char = str(plus(int(char)))
                    plus_l = plus_l[0:i] + new_char + plus_l[i + 1:]
                    # 遇到 deadends 或者 已经循环一圈则不加入queue
                    if plus_l not in l_deads and plus_l not in visited:
                        visited.add(plus_l)
                        queue.append(plus_l)

                    minus_l = cur
                    minus_l = minus_l[0:i] +\
                              str(minus(int(char))) + minus_l[i + 1:]
                    # 遇到 deadends 或者 已经循环一圈则不加入queue
                    if minus_l not in l_deads and minus_l not in visited:
                        queue.append(minus_l)
                        visited.add(minus_l)

            step = step + 1
        return -1
