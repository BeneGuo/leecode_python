class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        # amount_dict = {}  # 保存子问题的结果的字典

        # def get_coin_num(mmm):
        #     if mmm == 0:
        #         amount_dict[mmm] = 0
        #         return 0
        #     if mmm < 0:
        #         return -1

        #     res = float("inf")  # 求最小值，因此初始化为正无穷
        #     if mmm in amount_dict:
        #         return amount_dict.get(mmm)
        #     for coin in coins:
        #         sub_problem = get_coin_num(mmm - coin)
        #         if sub_problem == -1:
        #             continue
        #         res = min(res, 1 + sub_problem)
        #     amount_dict[mmm] = res if res != float("inf") else -1
        #     return amount_dict[mmm]

        # get_coin_num(amount)
        # return amount_dict.get(amount)
        """迭代解法"""
        if amount < 0:
            return -1
        mem = [amount+1] * (amount + 1)  # 字典最多amount个元素,初始值为amount+1
        mem[0] = 0  # base case
        for i in range(1, amount + 1):
            for coin in coins:
                if i < coin:
                    # 子问题无解，跳过
                    continue
                mem[i] = min(mem[i], 1 + mem[i - coin])
        return mem[amount] if (mem[amount] != (amount + 1)) else -1
