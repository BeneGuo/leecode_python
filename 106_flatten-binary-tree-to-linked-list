# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def flatten(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        # 左右中 后序遍历

        def flatten_node(node):
            if node is None:
                return
            flatten_node(node.left)
            flatten_node(node.right)

            right = node.right
            node.right = node.left
            node.left = None
            # 将原来的右子树接到当前右子树的末端
            p = node
            while p.right is not None:
                p = p.right  # 找新右子树的末端节点
            # 将原右子树连接到现在右子树的末端
            p.right = right

        flatten_node(root)
